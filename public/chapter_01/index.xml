<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Way of the Program on How to Think Like a Computer Scientist: Learning with Python 3 (Blue Ridge Boost Edition)</title>
    <link>https://blueridgeboost.com/pythonbook/chapter_01/</link>
    <description>Recent content in The Way of the Program on How to Think Like a Computer Scientist: Learning with Python 3 (Blue Ridge Boost Edition)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Sep 2023 11:30:50 -0400</lastBuildDate>
    
	<atom:link href="https://blueridgeboost.com/pythonbook/chapter_01/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Python Programming Language</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_01/s01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_01/s01/</guid>
      <description>The programming language you will be learning is Python. Python is an example of a high-level language; other high-level languages you might have heard of are C++, PHP, Pascal, C#, and Java.
As you might infer from the name high-level language, there are also low-level languages, sometimes referred to as machine languages or assembly languages. Loosely speaking, computers can only execute programs written in low-level languages. Thus, programs written in a high-level language have to be translated into something more suitable before they can run.</description>
    </item>
    
    <item>
      <title>What is a program?</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_01/s02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_01/s02/</guid>
      <description>A program is a sequence of instructions that specifies how to perform a computation. The computation might be something mathematical, such as solving a system of equations or finding the roots of a polynomial, but it can also be a symbolic computation, such as searching and replacing text in a document.
The details look different in different languages, but a few basic instructions appear in just about every language:
 input.</description>
    </item>
    
    <item>
      <title>What is debugging?</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_01/s03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_01/s03/</guid>
      <description>Programming is a complex process, and because it is done by human beings, it often leads to errors. Programming errors are called bugs and the process of tracking them down and correcting them is called debugging. Use of the term bug to describe small engineering difficulties dates back to at least 1889, when Thomas Edison had a bug with his phonograph.
Three kinds of errors can occur in a program: syntax errors, runtime errors, and semantic errors.</description>
    </item>
    
    <item>
      <title>Syntax errors</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_01/s04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_01/s04/</guid>
      <description>Python can only execute a program if the program is syntactically correct; otherwise, the process fails and returns an error message. Syntax refers to the structure of a program and the rules about that structure. For example, in English, a sentence must begin with a capital letter and end with a period. this sentence contains a syntax error. So does this one
For most humans, a few syntax errors are not a significant problem, which is why we can read the above sentences and still figure out what they mean.</description>
    </item>
    
    <item>
      <title>Runtime errors</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_01/s05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_01/s05/</guid>
      <description>The second type of error is a runtime error, so called because the error does not appear until you run the program. These errors are also called exceptions because they usually indicate that something exceptional (and bad) has happened.
Runtime errors are rare in the simple programs you will see in the first few chapters, so it might be a while before you encounter one.</description>
    </item>
    
    <item>
      <title>Semantic errors</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_01/s06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_01/s06/</guid>
      <description>The third type of error is the semantic error. If there is a semantic error in your program, it will run successfully, in the sense that the computer will not generate any error messages, but it will not do the right thing. It will do something else. Specifically, it will do what you told it to do.
The problem is that the program you wrote is not the program you wanted to write.</description>
    </item>
    
    <item>
      <title>Experimental debugging</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_01/s07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_01/s07/</guid>
      <description>One of the most important skills you will acquire is debugging. Although it can be frustrating, debugging is one of the most intellectually rich, challenging, and interesting parts of programming.
In some ways, debugging is like detective work. You are confronted with clues, and you have to infer the processes and events that led to the results you see.
Debugging is also like an experimental science. Once you have an idea what is going wrong, you modify your program and try again.</description>
    </item>
    
    <item>
      <title>Formal and natural languages</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_01/s08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_01/s08/</guid>
      <description>Natural languages are the languages that people speak, such as English, Spanish, and French. They were not designed by people (although people try to impose some order on them); they evolved naturally.
Formal languages are languages that are designed by people for specific applications. For example, the notation that mathematicians use is a formal language that is particularly good at denoting relationships among numbers and symbols. Chemists use a formal language to represent the chemical structure of molecules.</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_01/s09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_01/s09/</guid>
      <description>As programs get bigger and more complicated, they get more difficult to read. Formal languages are dense, and it is often difficult to look at a piece of code and figure out what it is doing, or why.
For this reason, it is a good idea to add notes to your programs to explain in natural language what the program is doing.
A comment in a computer program is text that is intended only for the human reader â€” it is completely ignored by the interpreter.</description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_01/s10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_01/s10/</guid>
      <description>Work in the jupyter notebook!</description>
    </item>
    
  </channel>
</rss>