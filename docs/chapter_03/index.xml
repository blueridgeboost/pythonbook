<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Draw with turtles on How to Think Like a Computer Scientist: Learning with Python 3 (Blue Ridge Boost Edition)</title>
    <link>https://blueridgeboost.com/pythonbook/chapter_03/</link>
    <description>Recent content in Draw with turtles on How to Think Like a Computer Scientist: Learning with Python 3 (Blue Ridge Boost Edition)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Sep 2023 11:30:50 -0400</lastBuildDate><atom:link href="https://blueridgeboost.com/pythonbook/chapter_03/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello Turtles!</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_03/s01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_03/s01/</guid>
      <description>Our first turtle program With the turtle library, we can draw by moving a virtual turtle around the screen. A typical way to learn coding is to start analyzing a simple program that demonstrates important features of a library and then change it.
Let&amp;rsquo;s write a couple of lines of Python program to create a new turtle and start drawing a rectangle. (We will call the variable that refers to our first turtle shelly, but you can choose any name you want so long as it follows the Python variable naming rules from the previous chapter).</description>
    </item>
    
    <item>
      <title>Color</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_03/s02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_03/s02/</guid>
      <description>An object can have various methods — things it can do — and it can also have attributes (sometimes called properties). These are internal variables that can be used to keep track of the state of the object.
For the Turtle objects, we can&amp;rsquo;t manipulate the internal state directly but instead can invoke methods on a Turtle object to change its internal state. We&amp;rsquo;ve already seen this with the facing direction in the last part — something must be keeping track of the direction the Turtle object is facing since it moves in a different forward direction after we called shelly.</description>
    </item>
    
    <item>
      <title>More Turtles</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_03/s03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_03/s03/</guid>
      <description>A Bale of Turtles Just like we can have many different integers in a program, we can have many Turtle objects. Each of them is called an instance. Methods can be called on each instance to change its state and make it move.
import turtle turtle.clearscreen() turtle.setup(200,200) turtle.bgcolor(&amp;#34;lightgreen&amp;#34;) tess = turtle.Turtle() # Create tess and set some attributes tess.color(&amp;#34;hotpink&amp;#34;) tess.pensize(5) alex = turtle.Turtle() # Create alex # Make tess draw an equilateral triangle tess.</description>
    </item>
    
    <item>
      <title>Loops</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_03/s04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_03/s04/</guid>
      <description>The for Loop When we drew the square, it was quite tedious. We had to explicitly repeat the steps of moving and turning four times. If we were drawing a hexagon, an octagon, or an enneacontaenneagon (that is a polygon with 99 sides!), it would have been worse.
So a basic building block of all programs is to be able to repeat some code, over and over again.
Python’s for loop does this.</description>
    </item>
    
    <item>
      <title>More Turtle Tricks</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_03/s06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_03/s06/</guid>
      <description>No Need to Be Positive Turtle methods can use negative angles or distances. So shelly.forward(-100) will move shelly backwards, and shelly.left(-30) turns her to the right. Additionally, because there are 360 degrees in a circle, turning 30 to the left will get shelly facing in the same direction as turning 330 to the right! The on-screen animation will differ, though — you will be able to tell if shelly is turning clockwise or counter-clockwise!</description>
    </item>
    
    <item>
      <title>Drawing a Bar Graph</title>
      <link>https://blueridgeboost.com/pythonbook/chapter_03/s07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blueridgeboost.com/pythonbook/chapter_03/s07/</guid>
      <description>Project: A Turtle Bar Chart Now we&amp;rsquo;re going to put together many of the things we&amp;rsquo;ve learned to write a program that uses a turtle to draw a bar chart.
Let&amp;rsquo;s start with some data to be charted:
xs = [48, 117, 200, 240, 160, 260, 220]
Corresponding to each data measurement, we will draw a rectangle of that height, with a fixed width. We are showing off a new programming concept called a function in the example below: we are defining the function draw_bar to draw a bar of our graph.</description>
    </item>
    
  </channel>
</rss>
